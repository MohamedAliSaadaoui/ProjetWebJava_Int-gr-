<!DOCTYPE html>
<html>
    <head>

        <meta charset="UTF-8">
        <meta name="csrf-token" content="{{ csrf_token('vote') }}">
        <link rel="stylesheet" href="{{ asset('css/style.css') }}">

        <style>





            /* Styles de base */
            body {
                font-family: 'Poppins', sans-serif;
                background-color: #f8f9fa;
                color: #333;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }

            /* Cartes de questions */
            .card {
                border: none;
                border-radius: 12px;
                background: #fff;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                overflow: hidden;
            }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
            }

            .card-body {
                padding: 20px;
            }

            .card-title {
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 10px;
            }

            .card-title a {
                color: #333;
                text-decoration: none;
                transition: color 0.3s ease;
            }

            .card-title a:hover {
                color: #007bff;
            }

            .card-text {
                font-size: 0.9rem;
                color: #666;
            }

            /* Icônes */
            .far, .fas {
                margin-right: 8px;
                color: #007bff;
            }

            /* Boutons */
            .btn {
                font-size: 0.9rem;
                font-weight: 500;
                padding: 8px 16px;
                border-radius: 8px;
                transition: all 0.3s ease;
            }

            .btn-outline-primary {
                border-color: #007bff;
                color: #007bff;
            }

            .btn-outline-primary:hover {
                background-color: #007bff;
                color: #fff;
            }

            .btn-outline-secondary {
                border-color: #6c757d;
                color: #6c757d;
            }

            .btn-outline-secondary:hover {
                background-color: #6c757d;
                color: #fff;
            }

            /* Cartes de réponses (feedbacks) */
            .answer-card {
                margin-top: 15px;
                border-left: 4px solid #007bff;
                border-radius: 8px;
                background-color: #f9f9f9;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            }

            .answer-card:hover {
                transform: translateX(5px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            }

            .answer-card .card-body {
                padding: 15px;
            }

            .answer-card .card-text {
                font-size: 0.9rem;
                color: #555;
            }

            .answer-card .card-text small {
                color: #777;
            }

            /* Couleurs en fonction de la valeur de `approved` */
            .answer-card.approved-high {
                border-left-color: #28a745;
                background-color: #d4edda;
            }

            .answer-card.approved-medium {
                border-left-color: #ffc107;
                background-color: #fff3cd;
            }

            .answer-card.approved-low {
                border-left-color: #dc3545;
                background-color: #f8d7da;
            }

            /* Boutons pour upvote/downvote */
            .btn-vote {
                font-size: 0.8rem;
                padding: 6px 12px;
                border-radius: 6px;
                margin: 3px;
                transition: all 0.3s ease;
                border: none;
            }

            .btn-vote.upvote {
                background-color: #28a745;
                color: white;
            }

            .btn-vote.downvote {
                background-color: #dc3545;
                color: white;
            }

            .btn-vote:hover {
                opacity: 0.8;
            }

            /* Formulaire d'ajout de réponse */
            .form-reponse {
                margin-top: 10px;
            }

            .form-reponse .form-group {
                margin-bottom: 15px;
            }

            .form-reponse .form-control {
                border-radius: 8px;
                border: 1px solid #e2e8f0;
                padding: 10px 15px;
                transition: all 0.3s ease;
            }

            .form-reponse .form-control:focus {
                border-color: #007bff;
                box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.2);
            }

            .form-reponse button[type="submit"] {
                background-color: #007bff;
                border: none;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: 500;
                transition: all 0.3s ease;
            }

            .form-reponse button[type="submit"]:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            }

            /* Notification */
            .notification-card {
                position: fixed;
                bottom: 20px;
                right: 20px;
                background-color: #28a745;
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                z-index: 1000;
                display: flex;
                align-items: center;
                justify-content: space-between;
                animation: slideIn 0.5s ease-out;
            }

            .notification-content {
                display: flex;
                align-items: center;
            }

            .notification-message {
                margin-right: 10px;
            }

            .notification-close-btn {
                background: none;
                border: none;
                color: white;
                font-size: 1.2rem;
                cursor: pointer;
            }

            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                }
                to {
                    transform: translateX(0);
                }
            }

            /* Responsive Design */
            @media (max-width: 768px) {
                .card-title {
                    font-size: 1.2rem;
                }

                .btn {
                    font-size: 0.8rem;
                    padding: 6px 12px;
                }
            }




        </style>

        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        {% block stylesheets %}
        {# Local assets using Symfony's asset function #}
            <link rel="stylesheet" href="{{ asset('assets/front/css/bootstrap.min.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/all.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/slick.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/nice-select.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/jquery-ui.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/animate.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/toastr.min.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/datatables.min.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/style.css') }}">
            <link rel="stylesheet" href="{{ asset('assets/front/css/custom.css') }}">
            <link rel="stylesheet" href="{{ asset('css/style.css') }}">


{#            ANIMATIOOOONNNNNNNNNNNN #}
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
            
            {# Favicon #}
            <link rel="icon" href="{{ asset('assets/images/17333080691572146352faviconpng.png') }}">
            
            {# Open Graph tags #}
            <meta property="og:title" content="Genius-Shop" />
            <meta property="og:image" content="{{ asset('assets/images/1730281140Blackpng.png') }}" />
            
            {# External resources #}
            <link href="https://fonts.googleapis.com/css?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&amp;display=swap" rel="stylesheet">
            
            {#admin dashboard style#}
            <link href="{{ asset('assets/BackAssets/admin/css/bootstrap.min.css') }}" rel="stylesheet" />
<link rel="stylesheet" href="{{ asset('assets/BackAssets/admin/css/fontawesome.css') }}">
<link rel="stylesheet" href="{{ asset('assets/BackAssets/admin/css/icofont.min.css') }}">
<link href="{{ asset('assets/BackAssets/admin/plugins/fullside-menu/css/dark-side-style.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/plugins/fullside-menu/waves.min.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/css/plugin.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/css/jquery.tagit.css') }}" rel="stylesheet" />
<link rel="stylesheet" href="{{ asset('assets/BackAssets/admin/css/bootstrap-coloroicker.css') }}">
<link href="{{ asset('assets/BackAssets/admin/css/style.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/css/custom.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/css/responsive.css') }}" rel="stylesheet" />
<link href="{{ asset('assets/BackAssets/admin/css/common.css') }}" rel="stylesheet" />

        {% endblock %}

        {% block javascripts %}

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    // Gestionnaire pour afficher/masquer les réponses
                    const toggleButtons = document.querySelectorAll('.toggle-feedbacks');

                    toggleButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            const questionId = this.getAttribute('data-question-id');
                            const feedbacksSection = document.getElementById(`feedbacks-${questionId}`);

                            if (feedbacksSection.style.display === 'none' || !feedbacksSection.style.display) {
                                feedbacksSection.style.display = 'block';
                                this.innerHTML = '<i class="fas fa-comments"></i> Masquer les réponses';
                            } else {
                                feedbacksSection.style.display = 'none';
                                this.innerHTML = '<i class="fas fa-comments"></i> Afficher les réponses';
                            }
                        });
                    });


                    document.addEventListener('DOMContentLoaded', function () {
                        console.log('Document loaded, initializing vote buttons...');

                        // Récupérer le token CSRF
                        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                        console.log('CSRF Token:', csrfToken);

                        // Gestionnaire pour les votes (like/dislike)
                        document.querySelectorAll('.btn-vote').forEach(button => {
                            button.addEventListener('click', function () {
                                console.log('Vote button clicked');

                                const feedbackId = this.getAttribute('data-feedback-id');
                                const action = this.getAttribute('data-action'); // 'up' ou 'down'
                                const url = `/feedback/${feedbackId}/${action}`; // URL de l'API

                                console.log('Feedback ID:', feedbackId);
                                console.log('Action:', action);
                                console.log('URL:', url);

                                // Désactiver le bouton pour éviter les votes multiples
                                this.disabled = true;

                                // Envoyer la requête AJAX
                                fetch(url, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'X-CSRF-TOKEN': csrfToken
                                    }
                                })
                                    .then(response => {
                                        console.log('Response received:', response);
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        console.log('Data received:', data);
                                        if (data.success) {
                                            // Mettre à jour le compteur de votes
                                            const approveCount = this.querySelector('.approve-count');
                                            if (approveCount) {
                                                approveCount.textContent = data.approved;
                                            }

                                            // Afficher un message de succès
                                            alert(data.message);
                                        } else {
                                            // Afficher un message d'erreur
                                            alert(data.message);
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        alert('Une erreur s\'est produite lors du vote.');
                                    })
                                    .finally(() => {
                                        // Réactiver le bouton en cas d'erreur
                                        this.disabled = false;
                                    });
                            });
                        });
                    });
                    // Gestionnaire pour afficher/masquer le formulaire de réponse
                    const repondreButtons = document.querySelectorAll('.btn-repondre');

                    repondreButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            const questionId = this.getAttribute('data-question-id');
                            const reponseCard = document.getElementById(`reponse-card-${questionId}`);

                            if (reponseCard.style.display === 'none' || !reponseCard.style.display) {
                                reponseCard.style.display = 'block';
                            } else {
                                reponseCard.style.display = 'none';
                            }
                        });
                    });

                    // Gestionnaire pour soumettre le formulaire de réponse via AJAX
                    const forms = document.querySelectorAll('.form-reponse');

                    forms.forEach(form => {
                        form.addEventListener('submit', function (e) {
                            e.preventDefault();

                            const formData = new FormData(form);
                            const questionId = form.dataset.questionId;
                            const submitButton = form.querySelector('button[type="submit"]');
                            const originalButtonText = submitButton.innerHTML;

                            // Désactiver le bouton pendant la soumission
                            submitButton.disabled = true;
                            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';

                            fetch(form.action, {
                                method: 'POST',
                                body: formData,
                                headers: {
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        // Afficher la notification de succès
                                        showNotification(data.message, 'success');

                                        // Réinitialiser le formulaire
                                        form.reset();

                                        // Masquer le formulaire de réponse
                                        const reponseCard = document.getElementById(`reponse-card-${questionId}`);
                                        reponseCard.style.display = 'none';

                                        refreshFeedbacks(questionId);
                                    } else {
                                        // Afficher la notification d'erreur
                                        showNotification(data.message, 'error');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    showNotification('Une erreur s\'est produite lors de l\'envoi de votre réponse.', 'error');
                                })
                                .finally(() => {
                                    // Réactiver le bouton
                                    submitButton.disabled = false;
                                    submitButton.innerHTML = originalButtonText;
                                });
                        });
                    });

                    // Fonction pour afficher une notification
                    function showNotification(message, type = 'success') {
                        // Créer la notification si elle n'existe pas
                        let notificationCard = document.getElementById('notification-card');

                        if (!notificationCard) {
                            notificationCard = document.createElement('div');
                            notificationCard.id = 'notification-card';
                            notificationCard.className = 'notification-card';

                            const notificationContent = document.createElement('div');
                            notificationContent.className = 'notification-content';

                            const notificationMessage = document.createElement('div');
                            notificationMessage.className = 'notification-message';

                            const closeButton = document.createElement('button');
                            closeButton.className = 'notification-close-btn';
                            closeButton.innerHTML = '&times;';

                            notificationContent.appendChild(notificationMessage);
                            notificationCard.appendChild(notificationContent);
                            notificationCard.appendChild(closeButton);

                            document.body.appendChild(notificationCard);

                            // Gestionnaire pour fermer la notification
                            closeButton.addEventListener('click', function() {
                                notificationCard.style.display = 'none';
                            });
                        }

                        // Mettre à jour le style selon le type
                        if (type === 'error') {
                            notificationCard.style.backgroundColor = '#dc3545';
                        } else {
                            notificationCard.style.backgroundColor = '#28a745';
                        }

                        // Mettre à jour le message
                        const notificationMessage = notificationCard.querySelector('.notification-message');
                        notificationMessage.textContent = message;

                        // Afficher la notification
                        notificationCard.style.display = 'flex';

                        // Masquer la notification après 5 secondes
                        setTimeout(() => {
                            notificationCard.style.display = 'none';
                        }, 5000);
                    }

                    // Fonction pour rafraîchir la section des réponses
                    // Cette fonction nécessiterait un endpoint supplémentaire pour récupérer les réponses
                    function refreshFeedbacks(questionId) {
                        const feedbacksSection = document.getElementById(`feedbacks-${questionId}`);

                        // Si vous souhaitez implémenter cette fonctionnalité, vous devrez créer un endpoint
                        // qui renvoie les réponses pour une question donnée et mettre à jour le DOM

                        // Exemple:
                        // fetch(`/question/${questionId}/feedbacks`)
                        //    .then(response => response.json())
                        //    .then(data => {
                        //        // Mettre à jour le DOM avec les nouvelles réponses
                        //    });

                        // Pour l'instant, nous nous contentons de recharger la page
                        location.reload();
                    }
                });
            </script>




            {#front logic #}
            <script src="{{ asset('assets/front/js/jquery.min.js') }}"></script>
            <script src="{{ asset('assets/front/js/slick.js') }}"></script>
            <script src="{{ asset('assets/front/js/jquery-ui.js') }}"></script>
            <script src="{{ asset('assets/front/js/nice-select.js') }}"></script>
            <script src="{{ asset('assets/front/js/wow.js') }}"></script>
            <script src="{{ asset('assets/front/js/bootstrap.bundle.min.js') }}"></script>
            <script src="{{ asset('assets/front/js/toastr.min.js') }}"></script>
            <script src="{{ asset('assets/front/js/script.js') }}"></script>
            <script src="{{ asset('assets/front/js/myscript.js') }}"></script>

            {#admin dashboard logic#}
            <script src="{{ asset('assets/BackAssets/admin/js/vendors/jquery-1.12.4.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/vendors/vue.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/vendors/bootstrap.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/jqueryui.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/plugins/fullside-menu/jquery.slimscroll.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/plugins/fullside-menu/waves.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/plugin.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/Chart.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/tag-it.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/nicEdit.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/bootstrap-colorpicker.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/notify.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/jquery.canvasjs.min.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/load.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/custom.js') }}"></script>
            <script src="{{ asset('assets/BackAssets/admin/js/myscript.js') }}"></script>
        {% endblock %}
    </head>
    <body>
        {% block body %}{% endblock %}
    </body>
</html>
